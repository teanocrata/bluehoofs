{"version":3,"sources":["components/CharacteristicCard.tsx","components/ServiceCard.tsx","components/DeviceCard.tsx","devices/HoofBluetoothCharacteristic.ts","devices/HoofBluetoothService.ts","devices/HoofBluetoothDevice.ts","devices/GenericBluetoothDevice.ts","devices/iTagBluetoothDevice.ts","devices/MiBluetoothDevice.ts","store/DeviceStore.ts","store/themes.ts","store/UiStore.ts","store/UserStore.ts","store/index.tsx","components/Configuration.tsx","components/Console.tsx","containers/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","components/Configuration.module.css","components/DeviceCard.module.css","containers/App.module.css"],"names":["CharacteristicCard","observer","characteristic","useState","undefined","data","setData","toggle","setToggle","handleRead","event","a","preventDefault","readValue","runInAction","console","error","handleToggle","writeValueWithoutResponse","Uint8Array","of","parseInt","currentTarget","id","then","href","uuid","slice","toUpperCase","name","properties","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","onClick","label","getInt8","alertLevels","map","value","icon","startNotifications","ServiceCard","service","style","width","characteristics","DeviceCard","device","className","css","content","use","tag","primaryServices","connected","disconnect","connect","disabled","connecting","delete","HoofBluetoothCharacteristic","_characteristic","updateCharacteristicValue","target","getUint8","log","addEventListener","handleNotifications","_","makeObservable","this","observable","action","ref","computed","fetch","response","ok","Error","statusText","contentType","headers","get","includes","TypeError","json","for","catch","warn","i","byteLength","push","toString","join","HoofBluetoothService","_service","setCharacteristics","getCharacteristics","HoofBluetoothDevice","deviceStore","_device","_deviceStore","gatt","info","toggleConnecting","setServer","gattServer","setPrimaryServices","setInfo","services","onDisconnected","body","getPrimaryServices","removeDevice","GenericBluetoothDevice","iTagBluetoothDevice","Object","keys","ITAG_GATT_PROFILE","MiBluetoothDevice","MI_GATT_PROFILE","DeviceStore","store","bluetoothLayer","devices","getDevice","deviceId","find","splice","indexOf","addDevice","requestDevice","acceptAllDevices","optionalServices","updateDevice","currentDevice","createDevice","bluethoothDevice","startsWith","message","uiStore","makeAutoObservable","navigator","bluetooth","getAvailability","isBluetoothAvailable","darkThemeOptions","primary","secondary","background","surface","onPrimary","onSecondary","onSurface","onError","textPrimaryOnBackground","textSecondaryOnBackground","textHintOnBackground","textDisabledOnBackground","textIconOnBackground","textPrimaryOnLight","textSecondaryOnLight","textHintOnLight","textDisabledOnLight","textIconOnLight","textPrimaryOnDark","textSecondaryOnDark","textHintOnDark","textDisabledOnDark","textIconOnDark","UiStore","theme","section","isMainMenuOpen","messages","isConsoleVisible","toggleTheme","openMainMenu","closeMainMenu","setSection","toggleConsole","createSnackbarQueue","UserStore","user","login","google","accounts","revoke","email","_done","initialize","client_id","process","context","nonce","auto_select","callback","token","base64","split","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","JSON","parse","parseJwt","credential","prompt","notification","isNotDisplayed","isSkippedMoment","RootStore","userStore","createStore","storeContext","React","createContext","StoreProvider","children","useLocalObservable","window","Provider","useStore","useContext","Configuration","configuration","Console","logs","setLogs","useEffect","Hook","currLogs","Unhook","handle","text","graphic","metaIcon","backgroundColor","variant","App","app","options","themeOptions","fixed","title","navigationIcon","onNav","endContent","onInteraction","_e","open","actionItems","onIcon","src","picture","modal","onClose","activated","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","origin","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.a0c2d266.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { HoofBluetoothCharacteristic } from '../devices/HoofBluetoothCharacteristic';\nimport { runInAction } from 'mobx';\n\nimport { Button } from '@rmwc/button';\nimport { Card, CardActionIcon, CardActionIcons, CardActions } from '@rmwc/card';\nimport { List, ListItem, ListItemPrimaryText, ListItemText } from '@rmwc/list';\n\ninterface Props {\n\tcharacteristic: HoofBluetoothCharacteristic;\n}\n\nexport const CharacteristicCard = observer(({ characteristic }: Props) => {\n\tconst [data, setData] = useState(undefined as DataView | undefined);\n\tconst [toggle, setToggle] = useState(false);\n\n\tconst handleRead = async (\n\t\tevent: React.MouseEvent<HTMLElement, MouseEvent>\n\t) => {\n\t\tevent.preventDefault();\n\t\ttry {\n\t\t\tconst data = await characteristic.readValue();\n\t\t\trunInAction(() => setData(data));\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tconst handleToggleNotifications = () => {\n\t\tcharacteristic.startNotifications();\n\t};\n\n\tconst handleToggle = async (\n\t\tevent: React.MouseEvent<HTMLElement, MouseEvent>\n\t) => {\n\t\tevent.preventDefault();\n\t\ttry {\n\t\t\tcharacteristic\n\t\t\t\t.writeValueWithoutResponse(\n\t\t\t\t\tUint8Array.of(parseInt(event.currentTarget.id))\n\t\t\t\t)\n\t\t\t\t.then(() => runInAction(() => setToggle(!toggle)));\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Card>\n\t\t\t<header>\n\t\t\t\t<a\n\t\t\t\t\thref={`https://teanocrata.github.io/ble-assigned-numbers/uuids/0x${characteristic.uuid\n\t\t\t\t\t\t.slice(4, 8)\n\t\t\t\t\t\t.toUpperCase()}.json`}\n\t\t\t\t>\n\t\t\t\t\t{characteristic.name}\n\t\t\t\t</a>\n\t\t\t</header>\n\t\t\t<List>\n\t\t\t\t{characteristic.properties.broadcast && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>broadcast</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.read && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>read</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.writeWithoutResponse && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>writeWithoutResponse</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.write && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>write</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.notify && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>notify</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.indicate && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>indicate</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.authenticatedSignedWrites && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>\n\t\t\t\t\t\t\t\tauthenticatedSignedWrites\n\t\t\t\t\t\t\t</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.reliableWrite && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>reliableWrite</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t\t{characteristic.properties.writableAuxiliaries && (\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t<ListItemPrimaryText>writableAuxiliaries</ListItemPrimaryText>\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t)}\n\t\t\t</List>\n\t\t\t<CardActions>\n\t\t\t\t{characteristic.properties.read && (\n\t\t\t\t\t<Button onClick={handleRead} label=\"Read\" />\n\t\t\t\t)}\n\t\t\t\t<span>{data?.getInt8(0)}</span>\n\t\t\t\t<CardActionIcons>\n\t\t\t\t\t{characteristic.alertLevels.map(({ value }) => (\n\t\t\t\t\t\t<CardActionIcon\n\t\t\t\t\t\t\tid={`${value}`}\n\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\tonClick={handleToggle}\n\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\tvalue === 0\n\t\t\t\t\t\t\t\t\t? 'volume_off'\n\t\t\t\t\t\t\t\t\t: value === 1\n\t\t\t\t\t\t\t\t\t? 'volume_down'\n\t\t\t\t\t\t\t\t\t: 'volume_up'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t{characteristic.properties.notify && (\n\t\t\t\t\t\t<CardActionIcon\n\t\t\t\t\t\t\ticon=\"notifications_off\"\n\t\t\t\t\t\t\tonClick={handleToggleNotifications}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</CardActionIcons>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n});\n","import React from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { HoofBluetoothService } from '../devices/HoofBluetoothService';\nimport { CharacteristicCard } from './CharacteristicCard';\nimport { Card, CardPrimaryAction } from '@rmwc/card';\n\ninterface Props {\n\tservice: HoofBluetoothService;\n}\n\nexport const ServiceCard = observer(({ service }: Props) => (\n\t<Card style={{ width: '21rem' }}>\n\t\t<CardPrimaryAction>\n\t\t\t{service.name}\n\t\t\t{(service.characteristics || []).map(characteristic => (\n\t\t\t\t<CharacteristicCard\n\t\t\t\t\tkey={characteristic.uuid}\n\t\t\t\t\tcharacteristic={characteristic}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</CardPrimaryAction>\n\t</Card>\n));\n","import React from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { MiBluetoothDevice } from '../devices/MiBluetoothDevice';\nimport { ServiceCard } from './ServiceCard';\nimport {\n\tCard,\n\tCardActionIcon,\n\tCardActionIcons,\n\tCardActions,\n\tCardPrimaryAction,\n} from '@rmwc/card';\n\nimport { Typography } from '@rmwc/typography';\n\nimport css from './DeviceCard.module.css';\ninterface Props {\n\tdevice: MiBluetoothDevice;\n}\n\nexport const DeviceCard = observer(({ device }: Props) => (\n\t<Card>\n\t\t<CardPrimaryAction>\n\t\t\t<div className={css.content}>\n\t\t\t\t<Typography use=\"headline6\" tag=\"h2\">\n\t\t\t\t\t{device.name}\n\t\t\t\t</Typography>\n\t\t\t\t{device.primaryServices &&\n\t\t\t\t\tdevice.primaryServices.map(service => (\n\t\t\t\t\t\t<ServiceCard key={service.uuid} service={service} />\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t</CardPrimaryAction>\n\t\t<CardActions>\n\t\t\t<CardActionIcons>\n\t\t\t\t<CardActionIcon\n\t\t\t\t\ticon={device.connected ? 'bluetooth_connected' : 'bluetooth'}\n\t\t\t\t\tonClick={device.connected ? device.disconnect : device.connect}\n\t\t\t\t\tdisabled={device.connecting}\n\t\t\t\t/>\n\t\t\t\t<CardActionIcon icon=\"delete\" onClick={device.delete} />\n\t\t\t</CardActionIcons>\n\t\t</CardActions>\n\t</Card>\n));\n","import {\n\taction,\n\tcomputed,\n\tobservable,\n\trunInAction,\n\tmakeObservable,\n} from 'mobx';\n\nexport class HoofBluetoothCharacteristic {\n\tprivate _characteristic: BluetoothRemoteGATTCharacteristic;\n\tname: string;\n\tvalue?: DataView;\n\tuuid: BluetoothRemoteGATTCharacteristic['uuid'];\n\treadValue: BluetoothRemoteGATTCharacteristic['readValue'] = () =>\n\t\tthis._characteristic.readValue();\n\n\twriteValueWithoutResponse: BluetoothRemoteGATTCharacteristic['writeValueWithoutResponse'] = value =>\n\t\tthis._characteristic.writeValueWithoutResponse(value);\n\n\tupdateCharacteristicValue = (event: Event) => {\n\t\tthis.value = (event?.target as any).value.getUint8(0);\n\t};\n\n\tproperties: BluetoothRemoteGATTCharacteristic['properties'];\n\n\tcharacteristics: Array<BluetoothRemoteGATTCharacteristic> | null = null;\n\tconstructor(characteristic: BluetoothRemoteGATTCharacteristic) {\n\t\tmakeObservable(this, {\n\t\t\tname: observable,\n\t\t\tvalue: observable,\n\t\t\tupdateCharacteristicValue: action,\n\t\t\tcharacteristics: observable.ref,\n\t\t\talertLevels: computed,\n\t\t});\n\n\t\tthis._characteristic = characteristic;\n\t\tthis.name = characteristic.uuid;\n\t\tthis.uuid = characteristic.uuid;\n\t\tthis.properties = characteristic.properties;\n\t\tfetch(\n\t\t\t`https://teanocrata.github.io/ble-assigned-numbers/uuids/0x${characteristic.uuid\n\t\t\t\t.slice(4, 8)\n\t\t\t\t.toUpperCase()}.json`\n\t\t)\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow Error(response.statusText);\n\t\t\t\t}\n\t\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\t\tif (!contentType || !contentType.includes('application/json')) {\n\t\t\t\t\tthrow new TypeError(\"Oops, we haven't got JSON!\");\n\t\t\t\t}\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data =>\n\t\t\t\trunInAction(() => {\n\t\t\t\t\tthis.name = data.for;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.catch(error => {\n\t\t\t\tconsole.warn(`Not found info for UUID ${characteristic.uuid}`);\n\t\t\t\tconsole.warn(error);\n\t\t\t});\n\t}\n\n\tget alertLevels() {\n\t\tif (this.name === 'Alert Level') {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tvalue: 0x00,\n\t\t\t\t\tlabel: 'No Alert',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 0x01,\n\t\t\t\t\tlabel: 'Mild Alert',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 0x02,\n\t\t\t\t\tlabel: 'High Alert',\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\treturn [];\n\t}\n\n\tstartNotifications = () => {\n\t\tconsole.log(this._characteristic)\n\t\tthis._characteristic.addEventListener('characteristicvaluechanged',\n\t\t\t\thandleNotifications);\n\t\tthis._characteristic.startNotifications().then(_ => {\n\t\t\tconsole.log('> Notifications started');\n\t\t\tthis._characteristic.addEventListener('characteristicvaluechanged',\n\t\t\t\thandleNotifications);\n\t\t});\n\t}\n}\n\nfunction handleNotifications(event: any) {\n\tlet value = event.target.value;\n\tlet a = [];\n\t// Convert raw data bytes to hex values just for the sake of showing something.\n\t// In the \"real\" world, you'd use data.getUint8, data.getUint16 or even\n\t// TextDecoder to process raw data bytes.\n\tfor (let i = 0; i < value.byteLength; i++) {\n\t  a.push('0x' + ('00' + value.getUint8(i).toString(16)).slice(-2));\n\t}\n\tconsole.log('> ' + a.join(' '));\n  }\n","import { observable, runInAction, makeObservable } from 'mobx';\nimport { HoofBluetoothCharacteristic } from './HoofBluetoothCharacteristic';\n\nexport class HoofBluetoothService {\n\tprivate _service: BluetoothRemoteGATTService;\n\tname: string;\n\tuuid: BluetoothRemoteGATTService['uuid'];\n\n\tcharacteristics: Array<HoofBluetoothCharacteristic> | null = null;\n\tconstructor(service: BluetoothRemoteGATTService) {\n\t\tmakeObservable(this, {\n\t\t\tname: observable,\n\t\t\tcharacteristics: observable.ref,\n\t\t});\n\n\t\tthis._service = service;\n\t\tthis.name = service.uuid;\n\t\tthis.uuid = service.uuid;\n\t\tfetch(\n\t\t\t`https://teanocrata.github.io/ble-assigned-numbers/uuids/0x${service.uuid\n\t\t\t\t.slice(4, 8)\n\t\t\t\t.toUpperCase()}.json`\n\t\t)\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow Error(response.statusText);\n\t\t\t\t}\n\t\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\t\tif (!contentType || !contentType.includes('application/json')) {\n\t\t\t\t\tthrow new TypeError(\"Oops, we haven't got JSON!\");\n\t\t\t\t}\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data =>\n\t\t\t\trunInAction(() => {\n\t\t\t\t\tthis.name = data.for;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.catch(error => {\n\t\t\t\tconsole.warn(`Not found info for UUID ${service.uuid}`);\n\t\t\t\tconsole.warn(error);\n\t\t\t});\n\t\tthis.setCharacteristics();\n\t}\n\n\tsetCharacteristics = async () => {\n\t\tconst characteristics = await this._service.getCharacteristics();\n\t\trunInAction(\n\t\t\t() =>\n\t\t\t\t(this.characteristics = characteristics.map(\n\t\t\t\t\tcharacteristic => new HoofBluetoothCharacteristic(characteristic)\n\t\t\t\t))\n\t\t);\n\t};\n}\n","import { observable, makeObservable, action, computed } from 'mobx';\nimport {TStore} from '../store';\nimport { HoofBluetoothService } from './HoofBluetoothService';\n\nexport abstract class HoofBluetoothDevice {\n\t_device: BluetoothDevice;\n\t_deviceStore: TStore['deviceStore'] | null = null;\n\tid: BluetoothDevice['id'];\n\tname: BluetoothDevice['name'];\n\n\tconnecting: boolean = false;\n\tgatt: BluetoothRemoteGATTServer | null = null;\n\tprimaryServices: Array<HoofBluetoothService> | null = null;\n\tconstructor(deviceStore: TStore['deviceStore'], device: BluetoothDevice) {\n\t\tmakeObservable(this, {\n\t\t\tgatt: observable.ref,\n\t\t\tprimaryServices: observable.ref,\n\t\t\tinfo: observable,\n\t\t\tsetServer: action,\n\t\t\tsetInfo: action,\n\t\t\tsetPrimaryServices: action,\n\t\t\tdelete: action,\n\t\t\tconnecting: observable,\n\t\t\ttoggleConnecting: action,\n\t\t\tconnected: computed\n\t\t});\n\t\tthis._deviceStore = deviceStore;\n\t\tthis._device = device;\n\t\tthis.id = device.id;\n\t\tthis.name = device.name;\n\t\tdevice.addEventListener('gattserverdisconnected', this.onDisconnected);\n\t\tthis.connect();\n\t}\n\tinfo: any | null = null;\n\n\tget connected() {\n\t\treturn this.gatt !== null;\n\t}\n\n\ttoggleConnecting = () => this.connecting = !this.connecting;\n\n\tsetServer = (gattServer: BluetoothRemoteGATTServer | null) => {\n\t\tthis.gatt = gattServer;\n\t\tthis.setPrimaryServices(null);\n\t};\n\n\tsetInfo = (info: any) => (this.info = info);\n\n\tsetPrimaryServices = (services: Array<BluetoothRemoteGATTService> | null) =>\n\t\t(this.primaryServices =\n\t\t\tservices?.map(service => new HoofBluetoothService(service)) || null);\n\n\tonDisconnected: BluetoothDeviceEventHandlers['ongattserverdisconnected'] = event => {\n\t\tthis._deviceStore?.notify({\n\t\t\tbody: `${(event.target as BluetoothDevice).name} disconected`,\n\t\t\ticon: 'warning',\n\t\t});\n\t\tthis.setServer(null);\n\t};\n\n\tconnect = async () => {\n\t\tthis.toggleConnecting();\n\t\tif (this.gatt) {\n\t\t\tthis._deviceStore?.notify({\n\t\t\t\tbody: `Trying to connect allready connected gatt server ${this.id}`,\n\t\t\t\ticon: 'warning'\n\t\t\t});\n\t\t\tthis.toggleConnecting();\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tconst gattServer = (await this._device.gatt?.connect()) || null;\n\t\t\tthis.setServer(gattServer);\n\t\t\tif (gattServer) {\n\t\t\t\tconst primaryServices = (await gattServer?.getPrimaryServices()) || [];\n\t\t\t\tthis.setPrimaryServices(primaryServices);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setServer(null);\n\t\t\tthis.setPrimaryServices(null);\n\t\t\tthis._deviceStore?.notify({\n\t\t\t\tbody: `Error while trying to connect ${this.name}`,\n\t\t\t\ticon: 'error'\n\t\t\t});\n\t\t\tconsole.error(error);\n\t\t} finally {\n\t\t\tthis.toggleConnecting();\n\t\t}\n\t};\n\n\tdisconnect = () => {\n\t\tthis._device.gatt?.disconnect();\n\t};\n\n\tdelete = () => {\n\t\tthis.disconnect();\n\t\tthis._deviceStore?.removeDevice(this);\n\t}\n}\n","import { HoofBluetoothDevice } from './HoofBluetoothDevice';\n\nexport class GenericBluetoothDevice extends HoofBluetoothDevice {\n\tstatic get memberUUID() {\n\t\treturn null;\n\t}\n\n\tstatic get optionalServices() {\n\t\treturn [];\n\t}\n}\n","import { HoofBluetoothDevice } from './HoofBluetoothDevice';\n\nimport ITAG_GATT_PROFILE from './iTagProfile.json';\nexport class iTagBluetoothDevice extends HoofBluetoothDevice {\n\tstatic get memberUUID() {\n\t\treturn 0xffe0;\n\t}\n\n\tstatic get optionalServices() {\n\t\treturn Object.keys(ITAG_GATT_PROFILE);\n\t}\n}\n","import { HoofBluetoothDevice } from './HoofBluetoothDevice';\n\nimport MI_GATT_PROFILE from './MiProfile.json';\nexport class MiBluetoothDevice extends HoofBluetoothDevice {\n\tstatic get memberUUID() {\n\t\treturn 0xfee0;\n\t}\n\n\tstatic get optionalServices() {\n\t\treturn Object.keys(MI_GATT_PROFILE);\n\t}\n}\n","import {SnackbarQueueMessage} from '@rmwc/snackbar';\nimport { makeAutoObservable } from 'mobx';\nimport type { TStore } from '.';\nimport { GenericBluetoothDevice } from '../devices/GenericBluetoothDevice';\nimport { iTagBluetoothDevice } from '../devices/iTagBluetoothDevice';\nimport { MiBluetoothDevice } from '../devices/MiBluetoothDevice';\n\nexport class DeviceStore {\n\tprivate store: TStore;\n\tprivate bluetoothLayer: Bluetooth | null = null;\n\tdevices: Array<MiBluetoothDevice | iTagBluetoothDevice> = [];\n\tconstructor(store: TStore) {\n\t\tmakeAutoObservable(this);\n\t\tthis.store = store;\n\t\tif ('bluetooth' in navigator) {\n\t\t\tnavigator.bluetooth.getAvailability().then(isBluetoothAvailable => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`> Bluetooth is ${isBluetoothAvailable ? 'available' : 'unavailable'}`\n\t\t\t\t);\n\t\t\t\tthis.bluetoothLayer = navigator.bluetooth;\n\t\t\t});\n\n\t\t\tif ('onavailabilitychanged' in navigator.bluetooth) {\n\t\t\t\tconsole.log('add availabilitychanged event handler');\n\t\t\t\tnavigator.bluetooth.addEventListener('availabilitychanged', event => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`> Bluetooth is ${\n\t\t\t\t\t\t\t(event as any).value ? 'available' : 'unavailable'\n\t\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t\tif ((event as any).value) {\n\t\t\t\t\t\tthis.bluetoothLayer = navigator.bluetooth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.bluetoothLayer = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tgetDevice = (deviceId: string) => {\n\t\treturn this.devices.find(device => device.id === deviceId);\n\t};\n\n\tget isBluetoothAvailable() {\n\t\treturn this.bluetoothLayer !== null;\n\t}\n\n\tremoveDevice = (device: MiBluetoothDevice | iTagBluetoothDevice) => {\n\t\tthis.devices.splice(this.devices.indexOf(device), 1);\n\t\t// TODO: device.dispose();\n\t};\n\n\taddDevice = () => {\n\t\tif (!this.bluetoothLayer) {\n\t\t\tthrow new Error(\"Can't use bluetooth\");\n\t\t}\n\t\tthis.bluetoothLayer\n\t\t\t.requestDevice({\n\t\t\t\tacceptAllDevices: true,\n\t\t\t\toptionalServices: [\n\t\t\t\t\t...MiBluetoothDevice.optionalServices,\n\t\t\t\t\t...iTagBluetoothDevice.optionalServices,\n\t\t\t\t],\n\t\t\t})\n\t\t\t.then(this.updateDevice)\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t};\n\n\tupdateDevice = (device: BluetoothDevice) => {\n\t\tconst currentDevice = this.getDevice(device.id);\n\t\tif (currentDevice) {\n\t\t\tcurrentDevice.setServer(null);\n\t\t} else {\n\t\t\tthis.createDevice(device);\n\t\t}\n\t};\n\n\tcreateDevice = (bluethoothDevice: BluetoothDevice) => {\n\t\tconst device = bluethoothDevice.name?.startsWith('iTAG')\n\t\t\t? new iTagBluetoothDevice(this, bluethoothDevice)\n\t\t\t: bluethoothDevice.name?.startsWith('MI')\n\t\t\t? new MiBluetoothDevice(this, bluethoothDevice)\n\t\t\t: new GenericBluetoothDevice(this, bluethoothDevice);\n\t\tthis.devices.push(device);\n\t\treturn device;\n\t};\n\n\tnotify = (message: SnackbarQueueMessage) => this.store.uiStore.notify(message); \n}\n","export const darkThemeOptions = {\n\tprimary: '#24aee9',\n\tsecondary: '#e539ff',\n\terror: '#b00020',\n\tbackground: '#212121',\n\tsurface: '#37474F',\n\tonPrimary: 'rgba(255,255,255,.87)',\n\tonSecondary: 'rgba(0,0,0,0.87)',\n\tonSurface: 'rgba(255,255,255,.87)',\n\tonError: '#fff',\n\ttextPrimaryOnBackground: 'rgba(255, 255, 255, 1)',\n\ttextSecondaryOnBackground: 'rgba(255, 255, 255, 0.7)',\n\ttextHintOnBackground: 'rgba(255, 255, 255, 0.5)',\n\ttextDisabledOnBackground: 'rgba(255, 255, 255, 0.5)',\n\ttextIconOnBackground: 'rgba(255, 255, 255, 0.5)',\n\ttextPrimaryOnLight: 'rgba(0, 0, 0, 0.87)',\n\ttextSecondaryOnLight: 'rgba(0, 0, 0, 0.54)',\n\ttextHintOnLight: 'rgba(0, 0, 0, 0.38)',\n\ttextDisabledOnLight: 'rgba(0, 0, 0, 0.38)',\n\ttextIconOnLight: 'rgba(0, 0, 0, 0.38)',\n\ttextPrimaryOnDark: 'white',\n\ttextSecondaryOnDark: 'rgba(255, 255, 255, 0.7)',\n\ttextHintOnDark: 'rgba(255, 255, 255, 0.5)',\n\ttextDisabledOnDark: 'rgba(255, 255, 255, 0.5)',\n\ttextIconOnDark: 'rgba(255, 255, 255, 0.5)',\n};\n","import { makeAutoObservable } from 'mobx';\nimport { createSnackbarQueue } from '@rmwc/snackbar';\nimport type { TStore } from '.';\nimport { darkThemeOptions } from './themes';\n\nexport class UiStore {\n\tprivate store: TStore;\n\ttheme: 'dark' | 'baseline' = 'baseline';\n\tsection: 'settings' | 'main' = 'main';\n\tisMainMenuOpen: boolean = false;\n\tmessages: ReturnType<typeof createSnackbarQueue>['messages'];\n\tnotify: ReturnType<typeof createSnackbarQueue>['notify'];\n\tisConsoleVisible: boolean = true;\n\n\tconstructor(store: TStore) {\n\t\tmakeAutoObservable(this);\n\t\tthis.store = store;\n\t\tconst { notify, messages } = createSnackbarQueue();\n\t\tthis.notify = notify;\n\t\tthis.messages = messages;\n\t}\n\n\tget themeOptions() {\n\t\treturn this.theme === 'baseline' ? {} : darkThemeOptions;\n\t}\n\n\ttoggleTheme = () =>\n\t\t(this.theme = this.theme === 'dark' ? 'baseline' : 'dark');\n\n\topenMainMenu = () => (this.isMainMenuOpen = true);\n\n\tcloseMainMenu = () => (this.isMainMenuOpen = false);\n\n\tsetSection = (section: 'settings' | 'main') => {\n\t\tthis.section = section;\n\t\tthis.isMainMenuOpen = false;\n\t};\n\ttoggleConsole = () => this.isConsoleVisible = !this.isConsoleVisible;\n}\n","import { makeAutoObservable } from 'mobx';\nimport type { TStore } from '.';\n\ndeclare var google: {\n\taccounts: {\n\t\tid: {\n\t\t\tinitialize: (config: any) => void;\n\t\t\tprompt: (callback: (notification: any) => void) => void;\n\t\t\trevoke: (email: string, callback: (done: any) => void) => void;\n\t\t};\n\t};\n};\n\nexport class UserStore {\n\tprivate store: TStore;\n\tuser: { [key: string]: string | boolean | number } | null = null;\n\n\tconstructor(store: TStore) {\n\t\tmakeAutoObservable(this);\n\t\tthis.store = store;\n\t}\n\n\tlogin = () => {\n\t\tif (!this.user) {\n\t\t\tgoogle.accounts.id.initialize({\n\t\t\t\tclient_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n\t\t\t\tcontext: 'use',\n\t\t\t\tnonce: '',\n\t\t\t\tauto_select: 'true',\n\t\t\t\tcallback: (response: any) => this.user = parseJwt(response.credential),\n\t\t\t});\n\t\t\tgoogle.accounts.id.prompt(notification => {\n\t\t\t\tif (notification.isNotDisplayed() || notification.isSkippedMoment()) {\n\t\t\t\t\tthis.store.uiStore.notify({\n\t\t\t\t\t\tbody: 'Oooops, something went wrong...',\n\t\t\t\t\t\ticon: 'warning',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tgoogle.accounts.id.revoke(this.user.email as string, _done => {\n\t\t\t\tthis.store.uiStore.notify({\n\t\t\t\t\tbody: 'Revoked',\n\t\t\t\t});\n\t\t\t\tthis.user = null;\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction parseJwt(token: string) {\n\tvar base64Url = token.split('.')[1];\n\tvar base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n\tvar jsonPayload = decodeURIComponent(\n\t\tatob(base64)\n\t\t\t.split('')\n\t\t\t.map(function (c) {\n\t\t\t\treturn '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n\t\t\t})\n\t\t\t.join('')\n\t);\n\n\treturn JSON.parse(jsonPayload);\n}\n","import React from 'react';\nimport { useLocalObservable } from 'mobx-react-lite';\n\nimport { DeviceStore } from './DeviceStore';\nimport { UiStore } from './UiStore';\nimport { UserStore } from './UserStore';\n\nclass RootStore {\n\tdeviceStore: DeviceStore;\n\tuiStore: UiStore;\n\tuserStore: UserStore;\n\n\tconstructor() {\n\t\tthis.deviceStore = new DeviceStore(this);\n\t\tthis.uiStore = new UiStore(this);\n\t\tthis.userStore = new UserStore(this);\n\t}\n}\n\nconst createStore = () => new RootStore();\n\nexport type TStore = ReturnType<typeof createStore>;\n\nconst storeContext = React.createContext<TStore | null>(null);\n\nexport const StoreProvider = ({ children }: { children: React.ReactChild }) => {\n\tconst store = useLocalObservable(createStore);\n\t(window as any).store = store;\n\treturn (\n\t\t<storeContext.Provider value={store}>{children}</storeContext.Provider>\n\t);\n};\n\nexport const useStore = () => {\n\tconst store = React.useContext(storeContext);\n\tif (!store) {\n\t\tthrow new Error('useStore must be used within a StoreProvider.');\n\t}\n\treturn store;\n};\n","import React from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { DeviceCard } from './DeviceCard';\n\nimport css from './Configuration.module.css';\nimport { Fab } from '@rmwc/fab';\nimport { useStore } from '../store';\n\nexport const Configuration = observer(() => {\n\tconst { deviceStore } = useStore();\n\n\treturn (\n\t\t<div className={css.configuration}>\n\t\t\t{!deviceStore.isBluetoothAvailable && <h1>No bluetooth available</h1>}\n\t\t\t<div className={css.devices}>\n\t\t\t\t{deviceStore.devices.map(device => (\n\t\t\t\t\t<DeviceCard key={device.id} device={device} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Fab icon=\"add\" onClick={deviceStore.addDevice} />\n\t\t</div>\n\t);\n});\n","import React, { useState, useEffect } from 'react';\nimport { Console as ConsoleFeed, Hook, Unhook } from 'console-feed';\n\nimport {CollapsibleList, SimpleListItem} from '@rmwc/list';\n\nconst Console = () => {\n    const [logs, setLogs] = useState([])\n\n    // run once!\n    useEffect(() => {\n        Hook(\n            window.console,\n            (log) => setLogs((currLogs) => [...currLogs, log] as any),\n            false\n        )\n        return (() => {\n            Unhook(window.console as any);\n        })\n    }, [])\n\n    return (\n        <CollapsibleList\n            handle={<SimpleListItem\n                text=\"Console\"\n                graphic=\"help\"\n                metaIcon=\"chevron_right\"\n            />}\n        >\n            <div style={{ backgroundColor: '#242424' }}>\n                <ConsoleFeed\n                    logs={logs}\n                    variant={'dark'}\n                />\n            </div>\n        </CollapsibleList>\n    );\n};\n\nexport { Console }\n","import React from 'react';\n\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport { Configuration } from '../components/Configuration';\n\nimport './App.css';\nimport css from './App.module.css';\n\nimport { Chip, ChipOnInteractionEventT } from '@rmwc/chip';\nimport { ThemeProvider } from '@rmwc/theme';\nimport { SimpleTopAppBar, TopAppBarFixedAdjust } from '@rmwc/top-app-bar';\nimport { SnackbarQueue } from '@rmwc/snackbar';\nimport { observer } from 'mobx-react-lite';\nimport { Drawer, DrawerContent } from '@rmwc/drawer';\nimport { List, ListItem, ListItemGraphic, ListItemText } from '@rmwc/list';\nimport { Avatar } from '@rmwc/avatar';\nimport { useStore } from '../store';\nimport {Console} from '../components/Console';\n\nexport const App = observer(() => {\n\tconst { uiStore, userStore } = useStore();\n\n\tconst setSection = (event: React.MouseEvent<HTMLElement>) => {\n\t\tuiStore.setSection((event.target as Element).id as typeof uiStore.section);\n\t};\n\n\tconst openTag = (_e: ChipOnInteractionEventT) =>\n\t\twindow.open(\n\t\t\t`https://github.com/teanocrata/bluehoofs/releases/tag/v${process.env.REACT_APP_VERSION}`\n\t\t);\n\n\treturn (\n\t\t<HelmetProvider>\n\t\t\t<ThemeProvider className={css.app} options={uiStore.themeOptions}>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<title>Blue hoofs</title>\n\t\t\t\t\t<meta name=\"description\" content=\"Mi band 2 for hoofs friends\" />\n\t\t\t\t</Helmet>\n\t\t\t\t<SimpleTopAppBar\n\t\t\t\t\tfixed\n\t\t\t\t\ttitle=\"Blue hoofs\"\n\t\t\t\t\tnavigationIcon\n\t\t\t\t\tonNav={uiStore.openMainMenu}\n\t\t\t\t\tendContent={\n\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\tonInteraction={openTag}\n\t\t\t\t\t\t\tlabel={process.env.REACT_APP_VERSION}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tactionItems={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ticon: 'dark_mode',\n\t\t\t\t\t\t\tonIcon: 'light_mode',\n\t\t\t\t\t\t\tonClick: uiStore.toggleTheme,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ticon: 'account_circle',\n\t\t\t\t\t\t\tonIcon: (\n\t\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\tuserStore.user\n\t\t\t\t\t\t\t\t\t\t\t? (userStore.user.picture as string)\n\t\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tonClick: userStore.login,\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<TopAppBarFixedAdjust />\n\t\t\t\t<Drawer\n\t\t\t\t\tmodal\n\t\t\t\t\topen={uiStore.isMainMenuOpen}\n\t\t\t\t\tonClose={uiStore.closeMainMenu}\n\t\t\t\t>\n\t\t\t\t\t<DrawerContent>\n\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\tid=\"main\"\n\t\t\t\t\t\t\t\tactivated={uiStore.section === 'main'}\n\t\t\t\t\t\t\t\tonClick={setSection}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ListItemGraphic />\n\t\t\t\t\t\t\t\t<ListItemText>Main</ListItemText>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\tid=\"settings\"\n\t\t\t\t\t\t\t\tactivated={uiStore.section === 'settings'}\n\t\t\t\t\t\t\t\tonClick={setSection}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ListItemGraphic icon=\"settings\" />\n\t\t\t\t\t\t\t\t<ListItemText>Settings</ListItemText>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</DrawerContent>\n\t\t\t\t</Drawer>\n\t\t\t\t{uiStore.section === 'settings' && <Configuration />}\n\t\t\t\t<Console />\n\t\t\t\t<SnackbarQueue messages={uiStore.messages} />\n\t\t\t</ThemeProvider>\n\t\t</HelmetProvider>\n\t);\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport '@rmwc/chip/styles';\nimport '@rmwc/top-app-bar/styles';\nimport '@rmwc/snackbar/styles';\nimport '@rmwc/icon-button/styles';\nimport '@rmwc/button/styles';\nimport '@rmwc/list/styles';\nimport '@rmwc/fab/styles';\nimport '@rmwc/typography/styles';\nimport '@rmwc/card/styles';\nimport '@rmwc/drawer/styles';\nimport '@rmwc/avatar/styles';\n\nimport { RMWCProvider } from '@rmwc/provider';\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n\t<RMWCProvider>\n\t\t<StoreProvider>\n\t\t\t<App />\n\t\t</StoreProvider>\n\t</RMWCProvider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"configuration\":\"Configuration_configuration__1IC0l\",\"addButton\":\"Configuration_addButton__2w3_S\",\"devices\":\"Configuration_devices__2oKI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"DeviceCard_content__fYjgx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1n11P\"};"],"sourceRoot":""}